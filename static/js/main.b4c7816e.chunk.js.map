{"version":3,"sources":["images/profilepic.JPG","components/Header.js","components/About.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","state","console","log","social","networks","map","network","key","name","href","url","className","id","title","main","Component","About","src","img","alt","about","bio","address","street","city","zip","phone","email","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"snCAAAA,EAAOC,QAAU,IAA0B,wC,0MCItBC,G,uDACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAMfC,QAAQC,IAAIC,EAAO,IACnB,IAAIC,EAASD,EAAOE,KAAI,SAASC,GAC7B,OAAO,wBAAIC,IAAKD,EAAQE,MAAM,uBAAGC,KAAMH,EAAQI,KAAK,uBAAGC,UAAWL,EAAQK,iBAE9E,OAEI,4BAAQC,GAAG,QAEX,yBAAKA,GAAG,YAEH,uBAAGD,UAAU,aAAaF,KAAK,YAAYI,MAAM,mBAAjD,mBACD,uBAAGF,UAAU,aAAaF,KAAK,QAAQI,MAAM,mBAA7C,mBAEA,wBAAID,GAAG,MAAMD,UAAU,OACnB,wBAAIA,UAAU,WAAU,uBAAGA,UAAU,eAAeF,KAAK,SAAjC,SACvB,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,UAAjC,UACJ,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,WAAjC,WACL,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,cAAjC,aACJ,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,YAAjC,cAIR,yBAAKE,UAAU,cACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,uBAAd,OAAyCG,EAAK,GAAGN,KAAjD,KACA,2EACA,6BACA,wBAAIG,UAAU,UACTP,KAIb,uBAAGO,UAAU,cACT,uBAAGA,UAAU,eAAeF,KAAK,UAAS,uBAAGE,UAAU,4B,GAxCvCI,c,wBCAfC,E,kDACjB,WAAYjB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAM,GAFG,E,qDAMd,OACI,6BAASY,GAAG,SACR,yBAAKD,UAAU,OACX,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,cAAcM,IAAKC,IAAKC,IAAI,2BAE/C,yBAAKR,UAAU,yBACX,wCACA,2BAAIS,EAAM,GAAGC,KACb,yBAAKV,UAAU,OACZ,yBAAKA,UAAU,2BACV,+CACA,uBAAGA,UAAU,WACT,8BAAOS,EAAM,GAAGZ,MAAY,6BAC5B,8BAAOY,EAAM,GAAGE,QAAQC,OAAO,6BACxBH,EAAM,GAAGE,QAAQE,KADxB,IAC+BJ,EAAM,GAAGE,QAAQtB,MAAM,6BAC/CoB,EAAM,GAAGE,QAAQG,KACjB,6BACP,8BAAOL,EAAM,GAAGM,OAAa,6BAC7B,8BAAON,EAAM,GAAGO,SAGzB,yBAAKhB,UAAU,oBACV,2BACI,uBAAGF,KAAK,WAAWE,UAAU,UAAS,uBAAGA,UAAU,mBAAnD,6B,GA/BDI,aCSpBa,MATf,WACE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIckB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.b4c7816e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/profilepic.fb2f0bce.JPG\";","import React, { Component } from 'react';\r\nimport main from '../data/main.json';\r\nimport social from '../data/social.json';\r\nimport '../css/layout.css';\r\nexport default class Header extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n      \r\n    }\r\n    render(){\r\n        console.log(social[0]);\r\n        var networks=social.map(function(network){\r\n            return <li key={network.name}><a href={network.url}><i className={network.className}></i></a></li>\r\n        })\r\n        return(\r\n           \r\n            <header id=\"home\">\r\n\r\n            <nav id=\"nav-wrap\">\r\n\r\n                 <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\r\n                <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\r\n\r\n                <ul id=\"nav\" className=\"nav\">\r\n                    <li className=\"current\"><a className=\"smoothscroll\" href=\"#home\">Home</a></li>\r\n                     <li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\r\n                     <li><a className=\"smoothscroll\" href=\"#resume\">Resume</a></li>\r\n                    <li><a className=\"smoothscroll\" href=\"#portfolio\">Projects</a></li>\r\n                    <li><a className=\"smoothscroll\" href=\"#contact\">Contact</a></li>\r\n                </ul>\r\n\r\n            </nav>\r\n                <div className=\"row banner\">\r\n                    <div className=\"banner-text\">\r\n                        <h1 className=\"responsive-headline\">I'm {main[0].name}.</h1>\r\n                        <h3>A passionate WebDeveloper and ProblemSolver</h3>\r\n                        <hr />\r\n                        <ul className=\"social\">\r\n                            {networks}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <p className=\"scrolldown\">\r\n                    <a className=\"smoothscroll\" href=\"#about\"><i className=\"icon-down-circle\"></i></a>\r\n                </p>\r\n            </header>\r\n            \r\n        )\r\n    }\r\n}","import React, { Component } from 'react'; \r\nimport about from '../data/about.json';\r\nimport img from '../images/profilepic.JPG';\r\nimport '../css/layout.css';\r\nexport default class About extends Component{\r\n    constructor(props){\r\n        super(props);\r\n        this.state={};\r\n    }\r\n    render(){\r\n\r\n        return(\r\n            <section id=\"about\">\r\n                <div className=\"row\">\r\n                    <div className=\"three columns\">\r\n                        <img className=\"profile-pic\" src={img} alt=\"saisitaram profilepic\"/>\r\n                    </div>\r\n                    <div className=\"nine columns main-col\">\r\n                        <h2>About Me</h2>\r\n                        <p>{about[0].bio}</p>\r\n                        <div className=\"row\">\r\n                           <div className=\"columns contact-details\">\r\n                                <h2>Contact Details</h2>\r\n                                <p className=\"address\">\r\n                                    <span>{about[0].name}</span><br />\r\n                                    <span>{about[0].address.street}<br />\r\n                                          {about[0].address.city},{about[0].address.state}<br />\r\n                                          {about[0].address.zip}\r\n                                    </span><br />\r\n                                    <span>{about[0].phone}</span><br />\r\n                                    <span>{about[0].email}</span>\r\n                                </p>\r\n                           </div>\r\n                           <div className=\"columns download\">\r\n                                <p>\r\n                                    <a href=\"download\" className=\"button\"><i className=\"fa fa-download\"></i>Download Resume</a>\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport About from './components/About';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <About />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}