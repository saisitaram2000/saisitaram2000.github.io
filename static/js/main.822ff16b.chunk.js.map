{"version":3,"sources":["components/Header.js","components/Resume.js","App.js","serviceWorker.js","index.js"],"names":["Header","props","networks","social","map","network","key","name","href","url","className","state","id","title","main","description","Component","Resume","education","resume","college","branch","year","location","skills","skill","toLowerCase","style","width","level","console","log","skillmessage","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"imDAKqBA,G,4DACjB,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAKTC,SAAW,kBAERC,EAAOC,KAAI,SAAAC,GACX,OAAO,wBAAIC,IAAKD,EAAQE,MAAM,uBAAGC,KAAMH,EAAQI,KAAK,uBAAGC,UAAWL,EAAQK,kBAP1E,EAAKC,MAAQ,GAFE,E,qDAcf,OAEI,4BAAQC,GAAG,QAEX,yBAAKA,GAAG,YAEH,uBAAGF,UAAU,aAAaF,KAAK,YAAYK,MAAM,mBAAjD,mBACD,uBAAGH,UAAU,aAAaF,KAAK,QAAQK,MAAM,mBAA7C,mBAEA,wBAAID,GAAG,MAAMF,UAAU,OACnB,wBAAIA,UAAU,WAAU,uBAAGA,UAAU,eAAeF,KAAK,SAAjC,SACvB,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,UAAjC,UACJ,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,WAAjC,WACL,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,cAAjC,aACJ,4BAAI,uBAAGE,UAAU,eAAeF,KAAK,YAAjC,cAIR,yBAAKE,UAAU,cACX,yBAAKA,UAAU,eACX,wBAAIA,UAAU,uBAAd,OAAyCI,EAAK,GAAGP,KAAjD,KACA,4BAAKO,EAAK,GAAGC,aACb,6BACA,wBAAIL,UAAU,UACV,uBAAMR,SAAN,SAIZ,uBAAGQ,UAAU,cACT,uBAAGA,UAAU,eAAeF,KAAK,UAAS,uBAAGE,UAAU,qC,GA5CvCM,c,OCDfC,E,kDACjB,WAAYhB,GAAQ,IAAD,8BACf,cAAMA,IAKTiB,UAAU,kBACRC,EAAO,GAAGD,UAAUd,KAAI,SAAAc,GACpB,OAAO,yBAAKZ,IAAKY,EAAUE,SAAS,4BAAKF,EAAUE,SACnD,uBAAGV,UAAU,QAAQQ,EAAUG,OAA/B,IAAuC,wCAAmB,wBAAIX,UAAU,QAAQQ,EAAUI,OAC1F,uBAAGV,GAAG,OAAOM,EAAUK,eAVX,EAanBC,OAAO,kBACHL,EAAO,GAAGK,OAAOpB,KAAI,SAAAqB,GACjB,IAAIf,EAAY,cAAce,EAAMlB,KAAKmB,cACzC,OAAO,wBAAIpB,IAAKmB,EAAMlB,MAAM,0BAAMoB,MAAO,CAACC,MAAOH,EAAMI,OAAQnB,UAAWA,IAAkB,4BAAKe,EAAMlB,WAd3G,EAAKI,MAAQ,GAFE,E,qDAqBf,OADAmB,QAAQC,IAAIZ,EAAO,GAAGD,WAE1B,6BAASN,GAAG,UACR,yBAAKF,UAAU,cACX,yBAAKA,UAAU,4BACX,4BAAI,6CAER,yBAAKA,UAAU,yBACX,yBAAKA,UAAU,YACX,yBAAKA,UAAU,kBACX,uBAAMQ,UAAN,UAKZ,yBAAKR,UAAU,SAEX,yBAAKA,UAAU,4BACX,4BAAI,0CAGR,yBAAKA,UAAU,yBAEX,uBAAGE,GAAG,UAAUO,EAAO,GAAGa,cAE1B,yBAAKtB,UAAU,QACX,wBAAIA,UAAU,UACV,uBAAMc,OAAN,e,GAhDQR,aCWrBiB,MAVf,WACE,OACE,yBAAKvB,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,EAAD,QCEcwB,QACW,cAA7BC,OAAOZ,SAASa,UAEe,UAA7BD,OAAOZ,SAASa,UAEhBD,OAAOZ,SAASa,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.822ff16b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport main from '../data/main.json';\r\nimport social from '../data/social.json';\r\nimport '../css/layout.css';\r\nimport '../css/mediaqueries.css';\r\nexport default class Header extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n      \r\n    }\r\n   \r\n     networks = () =>(\r\n        \r\n        social.map(network=>{\r\n        return <li key={network.name}><a href={network.url}><i className={network.className}></i></a></li>;\r\n    })\r\n     )\r\n    render(){\r\n       \r\n        return(\r\n           \r\n            <header id=\"home\">\r\n\r\n            <nav id=\"nav-wrap\">\r\n\r\n                 <a className=\"mobile-btn\" href=\"#nav-wrap\" title=\"Show navigation\">Show navigation</a>\r\n                <a className=\"mobile-btn\" href=\"#home\" title=\"Hide navigation\">Hide navigation</a>\r\n\r\n                <ul id=\"nav\" className=\"nav\">\r\n                    <li className=\"current\"><a className=\"smoothscroll\" href=\"#home\">Home</a></li>\r\n                     <li><a className=\"smoothscroll\" href=\"#about\">About</a></li>\r\n                     <li><a className=\"smoothscroll\" href=\"#resume\">Resume</a></li>\r\n                    <li><a className=\"smoothscroll\" href=\"#portfolio\">Projects</a></li>\r\n                    <li><a className=\"smoothscroll\" href=\"#contact\">Contact</a></li>\r\n                </ul>\r\n\r\n            </nav>\r\n                <div className=\"row banner\">\r\n                    <div className=\"banner-text\">\r\n                        <h1 className=\"responsive-headline\">I'm {main[0].name}.</h1>\r\n                        <h3>{main[0].description}</h3>\r\n                        <hr />\r\n                        <ul className=\"social\">\r\n                            <this.networks />\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n                <p className=\"scrolldown\">\r\n                    <a className=\"smoothscroll\" href=\"#about\"><i className=\"fa fa-chevron-circle-down\"></i></a>\r\n                </p>\r\n            </header>\r\n            \r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport resume from '../data/resume.json';\r\nimport '../css/layout.css';\r\nimport '../css/mediaqueries.css';\r\nexport default class Resume extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {};\r\n      \r\n    }\r\n\r\n     education=()=>(\r\n       resume[0].education.map(education=>{\r\n           return <div key={education.college}><h3>{education.college}</h3>\r\n           <p className=\"info\">{education.branch} <span>&bull;</span><em className=\"date\">{education.year}</em></p>\r\n           <p id=\"loc\">{education.location}</p></div>\r\n       })\r\n    )\r\n    skills=()=>(\r\n        resume[0].skills.map(skill=>{\r\n            var className = 'bar-expand '+skill.name.toLowerCase();\r\n            return <li key={skill.name}><span style={{width:(skill.level)}}className={className}></span><em>{skill.name}</em></li>\r\n        })\r\n    )\r\n    render(){\r\n        console.log(resume[0].education);\r\n        return(\r\n    <section id=\"resume\">\r\n        <div className=\" education\">\r\n            <div className=\"three columns header-col\">\r\n                <h1><span>Education</span></h1>\r\n            </div>\r\n            <div className=\"nine columns main-col\">\r\n                <div className=\"row item\">\r\n                    <div className=\"twelve columns\">\r\n                        <this.education />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n            <div className=\"skill\">\r\n\r\n                <div className=\"three columns header-col\">\r\n                    <h1><span>Skills</span></h1>\r\n                </div>\r\n\r\n                <div className=\"nine columns main-col\">\r\n\r\n                    <p id=\"skimsg\">{resume[0].skillmessage}</p>\r\n\r\n                    <div className=\"bars\">\r\n                        <ul className=\"skills\">\r\n                            <this.skills/>\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    </section>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\n// import About from './components/About';\nimport Resume from './components/Resume';\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      {/* <About /> */}\n      <Resume />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}